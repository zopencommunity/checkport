# Update bump details accordingly. Use bump check to confirm.
# bump: check-version /CHECK_VERSION="(.*)"/ https://github.com/libcheck/check.git|semver:*
CHECK_VERSION="0.15.2" # Specify a stable release
export ZOPEN_STABLE_TAG="${CHECK_VERSION}"

###
### Build control file for the check port
###

###
### Required Environment Variables
###

## Specify the default build line, either 'DEV' or 'STABLE' (default: STABLE)
export ZOPEN_BUILD_LINE="STABLE"

## Required IF ZOPEN_BUILD_LINE='STABLE'
export ZOPEN_STABLE_URL="https://github.com/libcheck/check.git"  # Specify the stable build URL (either git or tarball)
export ZOPEN_STABLE_DEPS="coreutils tar automake autoconf gettext bash libtool m4 pkgconfig sed cmake make zoslib grep gawk diffutils perl" # Specify the stable build dependencies.

## Required IF ZOPEN_BUILD_LINE='DEV'
export ZOPEN_DEV_URL=""   # Specify the dev build URL
export ZOPEN_DEV_DEPS=""  # Specify the dev build dependencies

## Specify a space-delimited list of applicable categories.
## See tool_categories.txt for valid options
export ZOPEN_CATEGORIES="testing"

## Runtime zopen tool dependencies to be installed alongside the tool.
export ZOPEN_RUNTIME_DEPS=""

## Runtime system prerequisites; supply the name of the system pre-requisties.
## Current available prerequisites: zos24 zos25 zos31 procfs (see https://github.com/zopencommunity/meta/blob/main/include/prereq.sh for a current list)
export ZOPEN_SYSTEM_PREREQ=""


###
### Build stage control environment variables
###

export ZOPEN_BOOTSTRAP="autoreconf" ## Bootstrap program to run (defaults to './bootstrap')
#export ZOPEN_CHECK=make"     ## Check program to run (defaults to 'make')
#export ZOPEN_CONFIGURE="./configure" ## Configuration program to run (defaults to './configure')
#export ZOPEN_INSTALL="make"   ## Installation program to run (defaults to 'make')
#export ZOPEN_MAKE="make"      ## Build program to run (defaults to 'make')
#export ZOPEN_CLEAN=""         ## Clean up program to run (defaults to 'make')


###
### Required user-supplied functions
###

zopen_check_results()
{
chk="tests/test-suite.log"
totalTests=$(grep "^# TOTAL: " ${chk} | head -1 | awk '{ print $3 }')
actualFailures=$(grep "^# FAIL: " ${chk} | head -1 | awk '{ print $3 }')
actualPass=$(grep "^# PASS: " ${chk} | head -1 | awk '{ print $3 }')
actualErrors=$(grep "^# ERROR: " ${chk} | head -1 | awk '{ print $3 }')
actualSkip=$(grep "^# SKIP: " ${chk} | head -1 | awk '{ print $3 }')
expectedFailures=2
expectedErrors=0
expectedPass=7
expectedSkip=0
totalExpectedFailures=$(($expectedFailures+$expectedErrors))
totalActualFailures=$(($actualFailures+$actualErrors))
totalRunTests=$(($totalTests-$actualSkip))

cat <<ZZ
actualFailures:$totalActualFailures
totalTests:$totalRunTests
expectedFailures:$totalExpectedFailures
ZZ
}

zopen_get_version()
{
  # Modify to echo the version of your tool/library
  # Rather than hardcoding the version, obtain the version by running the tool/library
  echo $CHECK_VERSION
}


###
### Optional user-supplied functions for zopen-build
###

zopen_append_to_env()
{
cat <<ZZ
if [ ! -z "\$ZOPEN_IN_ZOPEN_BUILD" ]; then
  export ZOPEN_EXTRA_CFLAGS="\${ZOPEN_EXTRA_CFLAGS} -I\$PWD/include"
  export ZOPEN_EXTRA_CXXFLAGS="\${ZOPEN_EXTRA_CXXFLAGS} -I\$PWD/include"
  export ZOPEN_EXTRA_LDFLAGS="\${ZOPEN_EXTRA_LDFLAGS} -L\$PWD/lib"
  export ZOPEN_EXTRA_LIBS="\${ZOPEN_EXTRA_LIBS} -lcheck"
fi
ZZ
}

#zopen_append_to_setup(){
  ## This function runs as part of generation of the setup.sh file. The output of
  ## the function is appended to setup.sh.
#}

#zopen_append_to_validate_install(){
  ## This function runs as part of generation of the install_test.sh file. The
  ## output of the function is appended to install_test.sh script.
#}

#zopen_install_caveats(){
  ## This function is run post install. All stdout messages are captured and
  ## added to the metadata.json as installation caveats.
#}

#zopen_append_to_zoslib_env(){
  ## This function runs as part of generation of the C function zoslib_env_hook,
  ## which can be used to set environment variables before main is run.
#}

#zopen_post_buildenv(){
  ## This function runs after the 'buildenv' is processed.
#}

#zopen_pre_build(){
  ## This function runs before the 'make' step of the build is run.
#}

#zopen_pre_check(){
  ## This function runs before the 'check' step of the build is run.
#}

#zopen_pre_configure(){
  ## This function runs before the 'configure' step of the build is run.
#}

#zopen_pre_install(){
  ## This function runs before the 'install' step of the build is run.
#}

#zopen_post_install(){
  ## This function runs after the 'install' step of the build is run.
#}

#zopen_pre_patch(){
  ## This function runs before the 'patch' step of the build is run.
#}

#zopen_pre_terminate(){
  ## This function runs before 'zopen build' terminates.
#}


###
### Optional build control variables
###

#export ZOPEN_EXTRA_CFLAGS="" ## C compiler flags to append to CFLAGS (defaults to '').
#export ZOPEN_EXTRA_CPPFLAGS="" ## C,C++ pre-processor flags to append to CPPFLAGS (defaults to '')
#export ZOPEN_EXTRA_CXXFLAGS="" ## C++ compiler flags to append to CXXFLAGS (defaults to '')
#export ZOPEN_EXTRA_LDFLAGS="" ## C,C++ linker flags to append to LDFLAGS (defaults to '')
#export ZOPEN_EXTRA_LIBS="" ## C,C++ libraries to append to LIBS (defaults to '')
export ZOPEN_BOOTSTRAP_OPTS="--install" ## Options to pass to bootstrap program (defaults to '')
#export ZOPEN_CHECK_MINIMAL="" ## Check program will not be passed CFLAGS, LDFLAGS, CPPFLAGS options but will get them from env vars.
#export ZOPEN_CHECK_OPTS="-C ../build test" ## Options to pass to check program (defaults to 'check')
#export ZOPEN_CHECK_TIMEOUT="" ## Timeout limit in seconds for the check program (defaults to '12600' # 3.5 hours)
#export ZOPEN_CLEAN_OPTS="" ## Options to pass to clean up  program (defaults to 'clean')
#export ZOPEN_CONFIGURE_MINIMAL="" ## Configuration program will not be passed CFLAGS, LDFLAGS, CPPFLAGS options but will get them from env vars.
#export ZOPEN_CONFIGURE_OPTS="" ## Options to pass to configuration program (defaults to '--prefix=')
export ZOPEN_EXTRA_CONFIGURE_OPTS="--enable-build-docs=no" ## Extra configure options to pass to configuration program. (defaults to '')
#export ZOPEN_INSTALL_OPTS="-C ../build install" ## Options to pass to installation program (defaults to 'install')
#export ZOPEN_MAKE_MINIMAL="" ## Build program will not be passed CFLAGS, LDFLAGS, CPPFLAGS options but will get them from env vars.
#export ZOPEN_MAKE_OPTS="-C ../build" ## Options to pass to build program (defaults to '-j')
#export ZOPEN_PATCH_DIR="" ## Specify directory from which patches should be applied.


###
### Restricted Usage - only set in ports if necessary
###

## Don't add zoslib as a dependency; most ports should keep this unset
#export ZOPEN_DONT_ADD_ZOSLIB_DEP=1


###
### Additional user-defined custom code  - runs during script source
###

## Add user-defined functions and code


